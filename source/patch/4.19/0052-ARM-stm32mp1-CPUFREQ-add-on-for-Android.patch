From d3df66eac5a25d1954416962dc8de5072090d417 Mon Sep 17 00:00:00 2001
From: frq09432 <nicolas.louboutin@st.com>
Date: Wed, 13 Feb 2019 15:19:58 +0100
Subject: [PATCH 3/6] ARM stm32mp1 CPUFREQ add-on for Android

---
 arch/arm/boot/dts/stm32mp157a-dk1.dts     |   7 +
 arch/arm/boot/dts/stm32mp157c-ed1.dts     |   7 +
 arch/arm/boot/dts/stm32mp157c.dtsi        |  15 ++
 arch/arm/mach-stm32/Kconfig               |   1 +
 drivers/clk/clk-stm32mp1.c                |  10 +-
 drivers/cpufreq/Kconfig.arm               |  10 +
 drivers/cpufreq/Makefile                  |   2 +-
 drivers/cpufreq/stm32-cpufreq.c           | 312 ++++++++++++++++++++++
 drivers/regulator/stm32-vrefbuf.c         |   1 +
 include/dt-bindings/clock/stm32mp1-clks.h | 425 +++++++++++++++---------------
 10 files changed, 576 insertions(+), 214 deletions(-)
 create mode 100644 drivers/cpufreq/stm32-cpufreq.c

diff --git a/arch/arm/boot/dts/stm32mp157a-dk1.dts b/arch/arm/boot/dts/stm32mp157a-dk1.dts
index 430bf14..c3fe847 100644
--- a/arch/arm/boot/dts/stm32mp157a-dk1.dts
+++ b/arch/arm/boot/dts/stm32mp157a-dk1.dts
@@ -137,6 +137,13 @@
 		status = "okay";
 	};
 
+	cpufreq@160000 {
+		compatible = "st,stm32-cpufreq";
+		reg = <0x160000 0x1000>;
+		status = "okay";
+		cpu-supply = <&vddcore>;
+	};
+
 	firmware {
 		android {
 			compatible = "android,firmware";
diff --git a/arch/arm/boot/dts/stm32mp157c-ed1.dts b/arch/arm/boot/dts/stm32mp157c-ed1.dts
index 5598149..4785bed 100644
--- a/arch/arm/boot/dts/stm32mp157c-ed1.dts
+++ b/arch/arm/boot/dts/stm32mp157c-ed1.dts
@@ -122,6 +122,13 @@
 		status = "okay";
 	};
 
+	cpufreq@160000 {
+		compatible = "st,stm32-cpufreq";
+		reg = <0x160000 0x1000>;
+		status = "okay";
+		cpu-supply = <&vddcore>;
+	};
+
 	firmware {
 		android {
 			compatible = "android,firmware";
diff --git a/arch/arm/boot/dts/stm32mp157c.dtsi b/arch/arm/boot/dts/stm32mp157c.dtsi
index 953b0b7..ac42074 100644
--- a/arch/arm/boot/dts/stm32mp157c.dtsi
+++ b/arch/arm/boot/dts/stm32mp157c.dtsi
@@ -19,14 +19,20 @@
 			compatible = "arm,cortex-a7";
 			device_type = "cpu";
 			reg = <0>;
+			clocks = <&rcc CK_MPU>, <&rcc PLL1_P>, <&rcc PLL1_P_DIV>;
+			clock-names = "ck_mpu", "pll1_p", "pll1_p_div";
 			clock-frequency = <650000000>;
+			operating-points-v2 = <&cpu_opp_table>;
 		};
 
 		cpu1: cpu@1 {
 			compatible = "arm,cortex-a7";
 			device_type = "cpu";
 			reg = <1>;
+			clocks = <&rcc CK_MPU>, <&rcc PLL1_P>, <&rcc PLL1_P_DIV>;
+			clock-names = "ck_mpu", "pll1_p", "pll1_p_div";
 			clock-frequency = <650000000>;
+			operating-points-v2 = <&cpu_opp_table>;
 		};
 	};
 
@@ -43,6 +49,15 @@
 		method = "smc";
 	};
 
+	cpu_opp_table: opp_table {
+		compatible = "operating-points-v2";
+		opp-650000000 {
+			opp-hz = /bits/ 64 <650000000>;
+			opp-microvolt = <1100000 1200000 1280000>;
+			clock-latency-ns = <20000>;
+		};
+	};
+
 	intc: interrupt-controller@a0021000 {
 		compatible = "arm,cortex-a7-gic";
 		#interrupt-cells = <3>;
diff --git a/arch/arm/mach-stm32/Kconfig b/arch/arm/mach-stm32/Kconfig
index 651bdf4..02a0837 100644
--- a/arch/arm/mach-stm32/Kconfig
+++ b/arch/arm/mach-stm32/Kconfig
@@ -8,6 +8,7 @@ menuconfig ARCH_STM32
 	select ARCH_HAS_RESET_CONTROLLER
 	select CLKSRC_STM32
 	select PINCTRL
+	select PM_OPP if PM
 	select RESET_CONTROLLER
 	select STM32_EXTI
 	help
diff --git a/drivers/clk/clk-stm32mp1.c b/drivers/clk/clk-stm32mp1.c
index fba9626..bb26705 100644
--- a/drivers/clk/clk-stm32mp1.c
+++ b/drivers/clk/clk-stm32mp1.c
@@ -129,7 +129,7 @@ static const char * const ref4_parents[] = {
 };
 
 static const char * const cpu_src[] = {
-	"ck_hsi", "ck_hse", "pll1_p"
+	"ck_hsi", "ck_hse", "pll1_p", "pll1_p_div"
 };
 
 static const char * const axi_src[] = {
@@ -286,6 +286,11 @@ static const struct clk_div_table mcu_div_table[] = {
 	{ 0 },
 };
 
+static const struct clk_div_table pll1_p_div_table [] = {
+	{ 1, 2 }, { 2, 4 }, { 3, 8 }, { 4, 16 },
+	{ 5, 16 }, { 6, 16 }, { 7, 16 },
+};
+
 static const struct clk_div_table apb_div_table[] = {
 	{ 0, 1 }, { 1, 2 }, { 2, 4 }, { 3, 8 },
 	{ 4, 16 }, { 5, 16 }, { 6, 16 }, { 7, 16 },
@@ -2316,6 +2321,9 @@ static const struct clock_config stm32mp1_clock_cfg[] = {
 		   _S_MUX(RCC_MSSCKSELR, 0, 2, 0),
 		   _S_DIV(RCC_MCUDIVR, 0, 4, 0, mcu_div_table)),
 
+	DIV_TABLE(PLL1_P_DIV, "pll1_p_div", "pll1_p", 0, RCC_MPCKDIVR, 0,
+		  3, 0, pll1_p_div_table),
+
 	DIV_TABLE(NO_ID, "pclk1", "ck_mcu", CLK_IGNORE_UNUSED, RCC_APB1DIVR, 0,
 		  3, CLK_DIVIDER_READ_ONLY, apb_div_table),
 
diff --git a/drivers/cpufreq/Kconfig.arm b/drivers/cpufreq/Kconfig.arm
index 0cd8eb7..365a226 100644
--- a/drivers/cpufreq/Kconfig.arm
+++ b/drivers/cpufreq/Kconfig.arm
@@ -255,6 +255,16 @@ config ARM_STI_CPUFREQ
 	  this config option if you wish to add CPUFreq support for STi based
 	  SoCs.
 
+config ARM_STM32_CPUFREQ
+	tristate "STM32 CPUFreq support"
+	depends on (ARCH_STM32 && OF)
+	help
+	  This driver uses the generic OPP framework to match the running
+	  platform with a predefined set of suitable values.  If not provided
+	  we will fall-back so safe-values contained in Device Tree.  Enable
+	  this config option if you wish to add CPUFreq support for STM32 based
+	  SoCs.
+
 config ARM_TANGO_CPUFREQ
 	bool
 	depends on CPUFREQ_DT && ARCH_TANGO
diff --git a/drivers/cpufreq/Makefile b/drivers/cpufreq/Makefile
index 648beca..0c2b649 100644
--- a/drivers/cpufreq/Makefile
+++ b/drivers/cpufreq/Makefile
@@ -82,6 +82,7 @@ obj-$(CONFIG_ARM_SCMI_CPUFREQ)		+= scmi-cpufreq.o
 obj-$(CONFIG_ARM_SCPI_CPUFREQ)		+= scpi-cpufreq.o
 obj-$(CONFIG_ARM_SPEAR_CPUFREQ)		+= spear-cpufreq.o
 obj-$(CONFIG_ARM_STI_CPUFREQ)		+= sti-cpufreq.o
+obj-$(CONFIG_ARM_STM32_CPUFREQ)		+= stm32-cpufreq.o
 obj-$(CONFIG_ARM_TANGO_CPUFREQ)		+= tango-cpufreq.o
 obj-$(CONFIG_ARM_TEGRA20_CPUFREQ)	+= tegra20-cpufreq.o
 obj-$(CONFIG_ARM_TEGRA124_CPUFREQ)	+= tegra124-cpufreq.o
@@ -89,7 +90,6 @@ obj-$(CONFIG_ARM_TEGRA186_CPUFREQ)	+= tegra186-cpufreq.o
 obj-$(CONFIG_ARM_TI_CPUFREQ)		+= ti-cpufreq.o
 obj-$(CONFIG_ARM_VEXPRESS_SPC_CPUFREQ)	+= vexpress-spc-cpufreq.o
 
-
 ##################################################################################
 # PowerPC platform drivers
 obj-$(CONFIG_CPU_FREQ_CBE)		+= ppc-cbe-cpufreq.o
diff --git a/drivers/cpufreq/stm32-cpufreq.c b/drivers/cpufreq/stm32-cpufreq.c
new file mode 100644
index 0000000..0c61c5f
--- /dev/null
+++ b/drivers/cpufreq/stm32-cpufreq.c
@@ -0,0 +1,312 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) STMicroelectronics 2018 - All Rights Reserved
+ * Author: Olivier Bideau <olivier.bideau@st.com> for STMicroelectronics.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/clk.h>
+#include <linux/cpu.h>
+#include <linux/delay.h>
+#include <linux/of.h>
+#include <linux/cpufreq.h>
+#include <linux/pm_opp.h>
+#include <linux/timex.h>
+#include <linux/platform_device.h>
+#include <linux/regulator/consumer.h>
+
+/* MPU regulator tolerance in percentage */
+#define MPU_TOLERANCE 5
+
+static struct cpufreq_frequency_table *stm32_freq_table;
+static atomic_t freq_table_users = ATOMIC_INIT(0);
+
+static struct device *mpu_dev;
+static struct regulator *mpu_reg;
+
+static struct clk *clk_pll1_p;
+static struct clk *clk_pll1_p_div;
+
+static int stm32_cpufreq_target(struct cpufreq_policy *policy, unsigned int index)
+{
+	unsigned long old_freq, new_freq;
+	int old_volt, new_volt;
+	int mpu_tol, wait_reg;
+	struct dev_pm_opp *opp;
+
+	old_freq = (unsigned long) (policy->cur * 1000);
+	new_freq = (unsigned long) (stm32_freq_table[index].frequency * 1000);
+
+	dev_info(mpu_dev, "%s: try to switch MPU from %ld Hz and %ld Hz\n",
+				__func__, old_freq, new_freq);
+
+	if (!mpu_reg)
+		return -EPERM;
+
+	opp = dev_pm_opp_find_freq_ceil(mpu_dev, &new_freq);
+	if (IS_ERR_OR_NULL(opp)) {
+		dev_err(mpu_dev, "%s: unable to find MPU OPP for %ld\n",
+			__func__, new_freq);
+		return -EINVAL;
+	}
+
+	new_volt = dev_pm_opp_get_voltage(opp);
+	dev_pm_opp_put(opp);
+
+	mpu_tol = new_volt * MPU_TOLERANCE / 100;
+
+	if (new_freq > old_freq) {
+
+		dev_info(mpu_dev, "%s: scaling CPU up\n", __func__);
+
+		// select pll1_p parent (pll1_p not divided)
+
+		/* Rise VDDcore first, wait for settling time */
+		old_volt = regulator_get_voltage(mpu_reg);
+
+		wait_reg = regulator_set_voltage_time(mpu_reg, old_volt, new_volt);
+
+		// regulator_set_voltage_tol(mpu_reg, new_volt, mpu_tol);
+		printk(KERN_ERR "call regulator_set_voltage_tol with new_volt = %d and mpu_tol = %d\n", new_volt, mpu_tol);
+
+		/* wait for regulator rise */
+		mdelay(wait_reg);
+
+		clk_set_parent(policy->clk, clk_pll1_p);
+
+	} else if (new_freq < old_freq) {
+
+		dev_info(mpu_dev, "%s: scaling CPU down\n", __func__);
+
+		/* Set MPUDIV depending on required clock (default = /2)*/
+/*
+		newfreq = clk_round_rate(clk_pll, newfreq);
+		if (newfreq <= 0) {
+			pr_err("clk_round_rate failed for cpu src clock\n");
+			return newfreq;
+		}
+
+		ret = clk_set_rate(clk_pll, new_freq);
+*/
+
+		clk_set_parent(policy->clk, clk_pll1_p_div);
+
+		/* Now decrease VDDcore */
+		// regulator_set_voltage_tol(mpu_reg, new_volt, mpu_tol);
+		printk(KERN_ERR "call regulator_set_voltage_tol with new_volt = %d and mpu_tol = %d\n", new_volt, mpu_tol);
+
+	}
+
+	policy->cur = (unsigned int) (new_freq / 1000);
+
+	return 0;
+}
+
+static int stm32_cpufreq_init(struct cpufreq_policy *policy)
+{
+	int result;
+
+	if (!mpu_dev) {
+		pr_err("%s: unable to get the MPU device\n", __func__);
+		return -EPERM;
+	}
+
+	policy->clk = clk_get(mpu_dev, "ck_mpu");
+	if (IS_ERR(policy->clk)) {
+		dev_err(mpu_dev, "%s: not possible to get ck_mpu clock, error %ld \n",
+				 __func__, PTR_ERR(policy->clk));
+		return PTR_ERR(policy->clk);
+	}
+
+	clk_pll1_p = clk_get(mpu_dev, "pll1_p");
+	if (IS_ERR(clk_pll1_p)) {
+		dev_err(mpu_dev, "%s: not possible to get pll1_p clock, error %ld",
+				 __func__, PTR_ERR(clk_pll1_p));
+		result = PTR_ERR(clk_pll1_p);
+		goto fail;
+	}
+
+	clk_pll1_p_div = clk_get(mpu_dev, "pll1_p_div");
+	if (IS_ERR(clk_pll1_p_div)) {
+		dev_err(mpu_dev, "%s: not possible to get pll1_p clock, error %ld",
+				 __func__, PTR_ERR(clk_pll1_p_div));
+		result = PTR_ERR(clk_pll1_p_div);
+		goto fail_1;
+	}
+
+	if (!stm32_freq_table) {
+		result = dev_pm_opp_init_cpufreq_table(mpu_dev, &stm32_freq_table);
+		if (result) {
+			dev_err(mpu_dev, "%s: cpu%d: failed creating freq table[%d]\n",
+					 __func__, policy->cpu, result);
+			goto fail;
+		}
+	}
+
+	atomic_inc_return(&freq_table_users);
+
+	/* FIXME: what's the actual transition time? */
+	result = cpufreq_generic_init(policy, stm32_freq_table, 300 * 1000);
+	if (!result)
+		return 0;
+
+	if (atomic_dec_and_test(&freq_table_users))
+		dev_pm_opp_free_cpufreq_table(mpu_dev, &stm32_freq_table);
+
+	clk_put(clk_pll1_p_div);
+fail_1:
+	clk_put(clk_pll1_p);
+fail:
+	clk_put(policy->clk);
+	return result;
+}
+
+static int stm32_cpufreq_exit(struct cpufreq_policy *policy)
+{
+	if (atomic_dec_and_test(&freq_table_users))
+		dev_pm_opp_free_cpufreq_table(mpu_dev, &stm32_freq_table);
+
+	clk_put(policy->clk);
+
+	if (! IS_ERR(clk_pll1_p))
+		clk_put(clk_pll1_p);
+
+	if (! IS_ERR(clk_pll1_p_div))
+		clk_put(clk_pll1_p_div);
+
+	return 0;
+}
+
+static struct cpufreq_driver stm32_cpufreq_driver = {
+	.flags	= CPUFREQ_NEED_INITIAL_FREQ_CHECK,
+	.get	= cpufreq_generic_get,
+	.verify	= cpufreq_generic_frequency_table_verify,
+	.target_index = stm32_cpufreq_target,
+	.init	= stm32_cpufreq_init,
+	.exit	= stm32_cpufreq_exit,
+	.name	= "stm32_freq",
+	.attr	= cpufreq_generic_attr,
+};
+
+static const struct of_device_id stm32_cpufreq_match[] = {
+	{
+		.compatible = "st,stm32-cpufreq",
+	},
+};
+MODULE_DEVICE_TABLE(of, stm32_cpufreq_match);
+
+static const char *find_supply_name(struct device *dev);
+
+static int stm32_cpufreq_probe(struct platform_device *pdev)
+{
+	const char *name;
+	int num, ret;
+	bool free_opp = false;
+
+	mpu_dev = get_cpu_device(0);
+	if (!mpu_dev) {
+		pr_warn("%s: unable to get the MPU device\n", __func__);
+		return -EINVAL;
+	}
+
+	num = dev_pm_opp_get_opp_count(mpu_dev);
+	if (num <= 0) {
+		ret = dev_pm_opp_of_add_table(mpu_dev);
+		if (ret < 0) {
+			dev_err(mpu_dev, "%s: failed to init OPP table: %d\n", __func__, ret);
+			goto fail;
+		}
+
+		free_opp = true;
+
+		num = dev_pm_opp_get_opp_count(mpu_dev);
+		if (num < 0) {
+			ret = num;
+			dev_err(mpu_dev, "%s: no OPP table is found: %d\n", __func__, ret);
+			goto fail_free_opp;
+		}
+	}
+
+	/* Get regulator */
+	name = find_supply_name(mpu_dev);
+
+	if (name)
+		mpu_reg = regulator_get(mpu_dev, name);
+	else
+		mpu_reg = regulator_get(mpu_dev, "vddcore");
+
+	if (IS_ERR(mpu_reg)) {
+		pr_warn("%s: unable to get MPU regulator\n", __func__);
+		mpu_reg = NULL;
+	} else {
+		/*
+		 * Ensure physical regulator is present.
+		 * (e.g. could be dummy regulator.)
+		 */
+		if (regulator_get_voltage(mpu_reg) < 0) {
+			pr_warn("%s: physical regulator not present for MPU\n",
+				__func__);
+			regulator_put(mpu_reg);
+			mpu_reg = NULL;
+		}
+	}
+	ret = cpufreq_register_driver(&stm32_cpufreq_driver);
+	if (ret) {
+		dev_err(mpu_dev, "%s: failed register driver: %d\n", __func__, ret);
+		goto fail_free_opp;
+	}
+
+	return 0;
+
+fail_free_opp:
+	if (free_opp)
+		dev_pm_opp_of_remove_table(mpu_dev);
+fail:
+	return ret;
+}
+
+static int stm32_cpufreq_remove(struct platform_device *pdev)
+{
+	return cpufreq_unregister_driver(&stm32_cpufreq_driver);
+}
+
+static const char *find_supply_name(struct device *dev)
+{
+	struct device_node *np;
+	struct property *pp;
+	int cpu = dev->id;
+	const char *name = NULL;
+
+	np = of_node_get(dev->of_node);
+
+	/* This must be valid for sure */
+	if (WARN_ON(!np))
+		return NULL;
+
+	pp = of_find_property(np, "cpu-supply", NULL);
+	if (pp) {
+		name = "cpu";
+		goto node_put;
+	}
+
+	dev_dbg(dev, "no regulator for cpu%d\n", cpu);
+node_put:
+	of_node_put(np);
+	return name;
+}
+
+static struct platform_driver stm32_cpufreq_platdrv = {
+	.driver = {
+		.name	= "stm32-cpufreq",
+		.of_match_table = stm32_cpufreq_match,
+	},
+	.probe		= stm32_cpufreq_probe,
+	.remove		= stm32_cpufreq_remove,
+};
+module_platform_driver(stm32_cpufreq_platdrv);
+
+MODULE_DESCRIPTION("cpufreq driver for STM32 SoCs");
+MODULE_LICENSE("GPL");
diff --git a/drivers/regulator/stm32-vrefbuf.c b/drivers/regulator/stm32-vrefbuf.c
index 29cca32..660ccc6 100644
--- a/drivers/regulator/stm32-vrefbuf.c
+++ b/drivers/regulator/stm32-vrefbuf.c
@@ -167,6 +167,7 @@ static const struct regulator_ops stm32_vrefbuf_volt_ops = {
 	.is_enabled	= stm32_vrefbuf_is_enabled,
 	.get_voltage_sel = stm32_vrefbuf_get_voltage_sel,
 	.set_voltage_sel = stm32_vrefbuf_set_voltage_sel,
+	.set_voltage_time_sel = regulator_set_voltage_time_sel,
 	.list_voltage	= regulator_list_voltage_table,
 };
 
diff --git a/include/dt-bindings/clock/stm32mp1-clks.h b/include/dt-bindings/clock/stm32mp1-clks.h
index 4cdaf13..ff92649 100644
--- a/include/dt-bindings/clock/stm32mp1-clks.h
+++ b/include/dt-bindings/clock/stm32mp1-clks.h
@@ -16,236 +16,237 @@
 #define CK_HSE_DIV2	5
 
 /* Bus clocks */
-#define TIM2		6
-#define TIM3		7
-#define TIM4		8
-#define TIM5		9
-#define TIM6		10
-#define TIM7		11
-#define TIM12		12
-#define TIM13		13
-#define TIM14		14
-#define LPTIM1		15
-#define SPI2		16
-#define SPI3		17
-#define USART2		18
-#define USART3		19
-#define UART4		20
-#define UART5		21
-#define UART7		22
-#define UART8		23
-#define I2C1		24
-#define I2C2		25
-#define I2C3		26
-#define I2C5		27
-#define SPDIF		28
-#define CEC		29
-#define DAC12		30
-#define MDIO		31
-#define TIM1		32
-#define TIM8		33
-#define TIM15		34
-#define TIM16		35
-#define TIM17		36
-#define SPI1		37
-#define SPI4		38
-#define SPI5		39
-#define USART6		40
-#define SAI1		41
-#define SAI2		42
-#define SAI3		43
-#define DFSDM		44
-#define FDCAN		45
-#define LPTIM2		46
-#define LPTIM3		47
-#define LPTIM4		48
-#define LPTIM5		49
-#define SAI4		50
-#define SYSCFG		51
-#define VREF		52
-#define TMPSENS		53
-#define PMBCTRL		54
-#define HDP		55
-#define LTDC		56
-#define DSI		57
-#define IWDG2		58
-#define USBPHY		59
-#define STGENRO		60
-#define SPI6		61
-#define I2C4		62
-#define I2C6		63
-#define USART1		64
-#define RTCAPB		65
-#define TZC1		66
-#define TZPC		67
-#define IWDG1		68
-#define BSEC		69
-#define STGEN		70
-#define DMA1		71
-#define DMA2		72
-#define DMAMUX		73
-#define ADC12		74
-#define USBO		75
-#define SDMMC3		76
-#define DCMI		77
-#define CRYP2		78
-#define HASH2		79
-#define RNG2		80
-#define CRC2		81
-#define HSEM		82
-#define IPCC		83
-#define GPIOA		84
-#define GPIOB		85
-#define GPIOC		86
-#define GPIOD		87
-#define GPIOE		88
-#define GPIOF		89
-#define GPIOG		90
-#define GPIOH		91
-#define GPIOI		92
-#define GPIOJ		93
-#define GPIOK		94
-#define GPIOZ		95
-#define CRYP1		96
-#define HASH1		97
-#define RNG1		98
-#define BKPSRAM		99
-#define MDMA		100
-#define GPU		101
-#define ETHCK		102
-#define ETHTX		103
-#define ETHRX		104
-#define ETHMAC		105
-#define FMC		106
-#define QSPI		107
-#define SDMMC1		108
-#define SDMMC2		109
-#define CRC1		110
-#define USBH		111
-#define ETHSTP		112
-#define TZC2		113
+#define TIM2		10
+#define TIM3		11
+#define TIM4		12
+#define TIM5		13
+#define TIM6		14
+#define TIM7		15
+#define TIM12		16
+#define TIM13		17
+#define TIM14		18
+#define LPTIM1		19
+#define SPI2		20
+#define SPI3		21
+#define USART2		22
+#define USART3		23
+#define UART4		24
+#define UART5		25
+#define UART7		26
+#define UART8		27
+#define I2C1		28
+#define I2C2		29
+#define I2C3		30
+#define I2C5		31
+#define SPDIF		32
+#define CEC			33
+#define DAC12		34
+#define MDIO		35
+#define TIM1		36
+#define TIM8		37
+#define TIM15		38
+#define TIM16		39
+#define TIM17		40
+#define SPI1		41
+#define SPI4		42
+#define SPI5		43
+#define USART6		44
+#define SAI1		45
+#define SAI2		46
+#define SAI3		47
+#define DFSDM		48
+#define FDCAN		49
+#define LPTIM2		50
+#define LPTIM3		51
+#define LPTIM4		52
+#define LPTIM5		53
+#define SAI4		54
+#define SYSCFG		55
+#define VREF		56
+#define TMPSENS		57
+#define PMBCTRL		58
+#define HDP			59
+#define LTDC		60
+#define DSI			61
+#define IWDG2		62
+#define USBPHY		63
+#define STGENRO		64
+#define SPI6		65
+#define I2C4		66
+#define I2C6		67
+#define USART1		68
+#define RTCAPB		69
+#define TZC1		70
+#define TZPC		71
+#define IWDG1		72
+#define BSEC		73
+#define STGEN		74
+#define DMA1		75
+#define DMA2		76
+#define DMAMUX		77
+#define ADC12		78
+#define USBO		79
+#define SDMMC3		80
+#define DCMI		81
+#define CRYP2		82
+#define HASH2		83
+#define RNG2		84
+#define CRC2		85
+#define HSEM		86
+#define IPCC		87
+#define GPIOA		88
+#define GPIOB		89
+#define GPIOC		90
+#define GPIOD		91
+#define GPIOE		92
+#define GPIOF		93
+#define GPIOG		94
+#define GPIOH		95
+#define GPIOI		96
+#define GPIOJ		97
+#define GPIOK		98
+#define GPIOZ		99
+#define CRYP1		100
+#define HASH1		101
+#define RNG1		102
+#define BKPSRAM		103
+#define MDMA		104
+#define GPU			105
+#define ETHCK		106
+#define ETHTX		107
+#define ETHRX		108
+#define ETHMAC		109
+#define FMC			110
+#define QSPI		111
+#define SDMMC1		112
+#define SDMMC2		113
+#define CRC1		114
+#define USBH		115
+#define ETHSTP		116
+#define TZC2		117
 
 /* Kernel clocks */
-#define SDMMC1_K	118
-#define SDMMC2_K	119
-#define SDMMC3_K	120
-#define FMC_K		121
-#define QSPI_K		122
-#define ETHCK_K		123
-#define RNG1_K		124
-#define RNG2_K		125
-#define GPU_K		126
-#define USBPHY_K	127
-#define STGEN_K		128
-#define SPDIF_K		129
-#define SPI1_K		130
-#define SPI2_K		131
-#define SPI3_K		132
-#define SPI4_K		133
-#define SPI5_K		134
-#define SPI6_K		135
-#define CEC_K		136
-#define I2C1_K		137
-#define I2C2_K		138
-#define I2C3_K		139
-#define I2C4_K		140
-#define I2C5_K		141
-#define I2C6_K		142
-#define LPTIM1_K	143
-#define LPTIM2_K	144
-#define LPTIM3_K	145
-#define LPTIM4_K	146
-#define LPTIM5_K	147
-#define USART1_K	148
-#define USART2_K	149
-#define USART3_K	150
-#define UART4_K		151
-#define UART5_K		152
-#define USART6_K	153
-#define UART7_K		154
-#define UART8_K		155
-#define DFSDM_K		156
-#define FDCAN_K		157
-#define SAI1_K		158
-#define SAI2_K		159
-#define SAI3_K		160
-#define SAI4_K		161
-#define ADC12_K		162
-#define DSI_K		163
-#define DSI_PX		164
-#define ADFSDM_K	165
-#define USBO_K		166
-#define LTDC_PX		167
-#define DAC12_K		168
-#define ETHPTP_K	169
+#define SDMMC1_K	120
+#define SDMMC2_K	121
+#define SDMMC3_K	122
+#define FMC_K		123
+#define QSPI_K		124
+#define ETHCK_K		125
+#define RNG1_K		126
+#define RNG2_K		127
+#define GPU_K		128
+#define USBPHY_K	129
+#define STGEN_K		130
+#define SPDIF_K		131
+#define SPI1_K		132
+#define SPI2_K		133
+#define SPI3_K		134
+#define SPI4_K		135
+#define SPI5_K		136
+#define SPI6_K		137
+#define CEC_K		138
+#define I2C1_K		139
+#define I2C2_K		140
+#define I2C3_K		141
+#define I2C4_K		142
+#define I2C5_K		143
+#define I2C6_K		144
+#define LPTIM1_K	145
+#define LPTIM2_K	146
+#define LPTIM3_K	147
+#define LPTIM4_K	148
+#define LPTIM5_K	149
+#define USART1_K	150
+#define USART2_K	151
+#define USART3_K	152
+#define UART4_K		153
+#define UART5_K		154
+#define USART6_K	155
+#define UART7_K		156
+#define UART8_K		157
+#define DFSDM_K		158
+#define FDCAN_K		159
+#define SAI1_K		160
+#define SAI2_K		161
+#define SAI3_K		162
+#define SAI4_K		163
+#define ADC12_K		164
+#define DSI_K		165
+#define DSI_PX		166
+#define ADFSDM_K	167
+#define USBO_K		168
+#define LTDC_PX		169
+#define DAC12_K		170
+#define ETHPTP_K	171
 
 /* PLL */
-#define PLL1		176
-#define PLL2		177
-#define PLL3		178
-#define PLL4		179
+#define PLL1		180
+#define PLL2		181
+#define PLL3		182
+#define PLL4		183
 
 /* ODF */
-#define PLL1_P		180
-#define PLL1_Q		181
-#define PLL1_R		182
-#define PLL2_P		183
-#define PLL2_Q		184
-#define PLL2_R		185
-#define PLL3_P		186
-#define PLL3_Q		187
-#define PLL3_R		188
-#define PLL4_P		189
-#define PLL4_Q		190
-#define PLL4_R		191
+#define PLL1_P		190
+#define PLL1_P_DIV	191
+#define PLL1_Q		192
+#define PLL1_R		193
+#define PLL2_P		194
+#define PLL2_Q		195
+#define PLL2_R		196
+#define PLL3_P		197
+#define PLL3_Q		198
+#define PLL3_R		199
+#define PLL4_P		200
+#define PLL4_Q		201
+#define PLL4_R		202
 
 /* AUX */
-#define RTC		192
+#define RTC		210
 
 /* MCLK */
-#define CK_PER		193
-#define CK_MPU		194
-#define CK_AXI		195
-#define CK_MCU		196
+#define CK_PER		220
+#define CK_MPU		221
+#define CK_AXI		222
+#define CK_MCU		223
 
 /* Time base */
-#define TIM2_K		197
-#define TIM3_K		198
-#define TIM4_K		199
-#define TIM5_K		200
-#define TIM6_K		201
-#define TIM7_K		202
-#define TIM12_K		203
-#define TIM13_K		204
-#define TIM14_K		205
-#define TIM1_K		206
-#define TIM8_K		207
-#define TIM15_K		208
-#define TIM16_K		209
-#define TIM17_K		210
+#define TIM2_K		230
+#define TIM3_K		231
+#define TIM4_K		232
+#define TIM5_K		233
+#define TIM6_K		234
+#define TIM7_K		235
+#define TIM12_K		236
+#define TIM13_K		237
+#define TIM14_K		238
+#define TIM1_K		239
+#define TIM8_K		240
+#define TIM15_K		241
+#define TIM16_K		242
+#define TIM17_K		243
 
 /* MCO clocks */
-#define CK_MCO1		211
-#define CK_MCO2		212
+#define CK_MCO1		250
+#define CK_MCO2		251
 
 /* TRACE & DEBUG clocks */
-#define CK_DBG		214
-#define CK_TRACE	215
+#define CK_DBG		260
+#define CK_TRACE	261
 
 /* DDR */
-#define DDRC1		220
-#define DDRC1LP		221
-#define DDRC2		222
-#define DDRC2LP		223
-#define DDRPHYC		224
-#define DDRPHYCLP	225
-#define DDRCAPB		226
-#define DDRCAPBLP	227
-#define AXIDCG		228
-#define DDRPHYCAPB	229
-#define DDRPHYCAPBLP	230
-#define DDRPERFM	231
+#define DDRC1		270
+#define DDRC1LP		271
+#define DDRC2		272
+#define DDRC2LP		273
+#define DDRPHYC		274
+#define DDRPHYCLP	275
+#define DDRCAPB		276
+#define DDRCAPBLP	277
+#define AXIDCG		278
+#define DDRPHYCAPB	279
+#define DDRPHYCAPBLP	280
+#define DDRPERFM	281
 
-#define STM32MP1_LAST_CLK 232
+#define STM32MP1_LAST_CLK 290
 
 #endif /* _DT_BINDINGS_STM32MP1_CLKS_H_ */
-- 
2.7.4

